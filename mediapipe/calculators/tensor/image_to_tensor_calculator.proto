// Copyright 2020 The MediaPipe Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package mediapipe;

import "mediapipe/framework/calculator.proto";

message GpuOrigin {
  enum Mode {
    DEFAULT = 0;

    // OpenGL: bottom-left origin
    // Metal : top-left origin
    CONVENTIONAL = 1;

    // OpenGL: top-left origin
    // Metal : top-left origin
    TOP_LEFT = 2;
  }
}

message ImageToTensorCalculatorOptions {
  extend mediapipe.CalculatorOptions {
    optional ImageToTensorCalculatorOptions ext = 334361939;
  }

  // Range of float values [min, max].
  // min, must be strictly less than max.
  message FloatRange {
    optional float min = 1;
    optional float max = 2;
  }

  // Pixel extrapolation methods. See @border_mode.
  enum BorderMode {
    BORDER_UNSPECIFIED = 0;
    BORDER_ZERO = 1;
    BORDER_REPLICATE = 2;
  }

  optional int32 output_tensor_width = 1;
  optional int32 output_tensor_height = 2;

  // If true, image region will be extracted and copied into tensor keeping
  // region aspect ratio, which usually results in letterbox padding. Otherwise,
  // if false, image region is stretched to fill output tensor fully.
  optional bool keep_aspect_ratio = 3;

  // Output tensor element range/type image pixels are converted to.
  oneof range {
    FloatRange output_tensor_float_range = 4;
  }

  // For CONVENTIONAL mode for OpenGL, input image starts at bottom and needs
  // to be flipped vertically as tensors are expected to start at top.
  // (DEFAULT or unset interpreted as CONVENTIONAL.)
  optional GpuOrigin.Mode gpu_origin = 5;

  // Pixel extrapolation method.
  // When converting image to tensor it may happen that tensor needs to read
  // pixels outside image boundaries. Border mode helps to specify how such
  // pixels will be calculated.
  //
  // BORDER_REPLICATE is used by default.
  optional BorderMode border_mode = 6;
}
